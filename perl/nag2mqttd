#!/usr/bin/perl

/* nag2mqtt - Nagios event broker to MQTT gateway
 *
 * Authors:
 *   Thomas Liske <liske@ibh.de>
 *
 * Copyright Holder:
 *   2016 (C) IBH IT-Service GmbH [https://github.com/DE-IBH/nag2mqtt/]
 *
 * License:
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this package; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 */

use warnings;
use strict;

use AnyEvent;
use AnyEvent::MQTT;
use Linux::Inotify2;
use File::Slurp;
use JSON;
use Sys::Hostname;

my %conf = (
    base_dir => q(/run/nag2mqtt/publish),
    base_topic => '/nagios',
);

my %mqtt_conf = (
    host => q(localhost),

    will_topic => "$conf{base_topic}/hosts/".hostname,
    will_retain => 1,
    will_message => encode_json({
	state => q(dead),
    }),

    client_id => q(nag2mqtt),

    on_error => sub {
	my ($fatal, $message) = @_;

	die "$fatal $message\n";
    },
);

my %cv = (
    quit => AnyEvent->condvar,
);


my $mqtt = AnyEvent::MQTT->new(%mqtt_conf);;


my $inotify = new Linux::Inotify2 or
    die "unable to create new inotify object: $!\n";

$inotify->watch($conf{base_dir}, IN_ONLYDIR | IN_MOVED_TO, sub {
    my $e = shift;
    my $fn = $e->fullname;

    publish_json( read_file($fn) );
    unlink($fn);
 });

my $inot = AnyEvent->io(
    fh => $inotify->fileno,
    poll => 'r',
    cb => sub {
	$inotify->poll;
    });


sub publish_json {
    my $json = shift;
    my $href = decode_json($json);
    
    my @topic = ('', split(/\//, $conf{base_topic}));
    push(@topic, $href{_prefix}) if($href{_prefix});
    push(@topic, $href{hostname});
    push(@topic, $href{service_description}) if($href{_type} eq 'SERVICE');
    my $topic = join('/', @topic);

    $mqtt->publish(
	topic => $topic,
	message => $json,
	);

    print "PUB: $topic\n";
}


$mqtt->publish(
    topic => $mqtt_conf{will_topic},
    retain => 1,
    message => encode_json({
	state => q(alive),
    }),
);

$cv{quit}->recv;
